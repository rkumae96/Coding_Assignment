import torch
import torch.nn as nn
import torch.nn.functional as F
import math

# Set the hyperparameters
max_seq_len = 1024
vocab_size = 50257  # Standard GPT-2 Tokenizer vocab size
d_model = 768  # Dimension of embeddings and hidden states
n_heads = 12  # Number of attention heads
n_layers = 12  # Number of transformer blocks

# Helper function to initialize weights
def _init_weights(module):
    if isinstance(module, (nn.Linear, nn.Embedding)):
        module.weight.data.normal_(mean=0.0, std=0.02)
        if isinstance(module, nn.Linear) and module.bias is not None:
            module.bias.data.zero_()
    elif isinstance(module, nn.LayerNorm):
        module.bias.data.zero_()
        module.weight.data.fill_(1.0)

# Multi-Head Self-Attention
class MultiHeadSelfAttention(nn.Module):
    def __init__(self):
        super().__init__()
        self.key = nn.Linear(d_model, d_model)
        self.query = nn.Linear(d_model, d_model)
        self.value = nn.Linear(d_model, d_model)
        self.out = nn.Linear(d_model, d_model)
        self.n_heads = n_heads

    def forward(self, x):
        B, T, C = x.size()
        k = self.key(x).view(B, T, self.n_heads, C // self.n_heads).transpose(1, 2)
        q = self.query(x).view(B, T, self.n_heads, C // self.n_heads).transpose(1, 2)
        v = self.value(x).view(B, T, self.n_heads, C // self.n_heads).transpose(1, 2)

        attn = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))
        attn = F.softmax(attn, dim=-1)
        out = (attn @ v).transpose(1, 2).contiguous().view(B, T, C)

        return self.out(out)

# Feed-Forward Network
class PointWiseFeedForward(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(d_model, d_model * 4)
        self.fc2 = nn.Linear(d_model * 4, d_model)

    def forward(self, x):
        return self.fc2(F.gelu(self.fc1(x)))

# Transformer Block
class TransformerBlock(nn.Module):
    def __init__(self):
        super().__init__()
        self.attention = MultiHeadSelfAttention()
        self.norm1 = nn.LayerNorm(d_model)
        self.ff = PointWiseFeedForward()
        self.norm2 = nn.LayerNorm(d_model)

    def forward(self, x):
        x = self.norm1(x + self.attention(x))
        x = self.norm2(x + self.ff(x))
        return x

# GPT-2 Model
class GPT2(nn.Module):
    def __init__(self):
        super().__init__()
        self.tok_emb = nn.Embedding(vocab_size, d_model)
        self.pos_emb = nn.Embedding(max_seq_len, d_model)
        self.drop = nn.Dropout(0.1)
        self.blocks = nn.Sequential(*[TransformerBlock() for _ in range(n_layers)])
        self.ln_f = nn.LayerNorm(d_model)
        self.head = nn.Linear(d_model, vocab_size, bias=False)

        self.apply(_init_weights)

    def forward(self, x):
        positions = torch.arange(0, x.size(-1), device=x.device).unsqueeze(0)
        x = self.drop(self.tok_emb(x) + self.pos_emb(positions))
        x = self.blocks(x)
        x = self.ln_f(x)
        logits = self.head(x)
        return logits

